package sweepers

import (
	"bytes"
	"fmt"
	"go/format"
	"log"
	"os"
	"strings"
	"text/template"
)

// "_test" is required for the functions to be compiled in the correct package
const filenameFormat = `gen_%s_sweepers_test.go`

type ResourceType struct {
	ListerFunction       string
	ListerOutputType     string
	ListerPageField      string
	ResourceNameFunction string
}

type TemplateData struct {
	Package       string
	ServiceName   string
	ResourceTypes map[string]ResourceType
}

func Run(serviceName string, resourceTypes map[string]ResourceType) {
	destinationPackage := os.Getenv("GOPACKAGE")
	if destinationPackage == "" {
		log.Fatal("error: required environment variable GOPACKAGE not defined")
	}

	templateData := TemplateData{
		Package:       destinationPackage,
		ServiceName:   serviceName,
		ResourceTypes: resourceTypes,
	}
	templateFuncMap := template.FuncMap{
		"Title": strings.Title,
		"dict":  dict,
	}

	tmpl, err := template.New("sweepers").Funcs(templateFuncMap).Parse(sweepersBody)
	if err != nil {
		log.Fatalf("error parsing template \"sweepers\": %s", err)
	}
	_, err = tmpl.New("single").Parse(singleBody)
	if err != nil {
		log.Fatalf("error parsing template \"single\": %s", err)
	}

	var buffer bytes.Buffer
	err = tmpl.Execute(&buffer, templateData)

	if err != nil {
		log.Fatalf("error executing template: %s", err)
	}

	generatedFileContents, err := format.Source(buffer.Bytes())

	if err != nil {
		log.Fatalf("error formatting generated file: %s", err)
	}

	filename := fmt.Sprintf(filenameFormat, serviceName)
	f, err := os.Create(filename)

	if err != nil {
		log.Fatalf("error creating file (%s): %s", filename, err)
	}

	defer f.Close()

	_, err = f.Write(generatedFileContents)

	if err != nil {
		log.Fatalf("error writing to file (%s): %s", filename, err)
	}
}

// Copied from https://github.com/Masterminds/sprig
func dict(v ...interface{}) map[string]interface{} {
	dict := map[string]interface{}{}
	lenv := len(v)
	for i := 0; i < lenv; i += 2 {
		key := strval(v[i])
		if i+1 >= lenv {
			dict[key] = ""
			continue
		}
		dict[key] = v[i+1]
	}
	return dict
}

func strval(v interface{}) string {
	switch v := v.(type) {
	case string:
		return v
	case []byte:
		return string(v)
	case error:
		return v.Error()
	case fmt.Stringer:
		return v.String()
	default:
		return fmt.Sprintf("%v", v)
	}
}

const sweepersBody = `// Code generated by {{ .ServiceName }}/generators/sweepers/main.go; DO NOT EDIT.

package {{ .Package }}

import (
	"fmt"
	"log"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/service/{{ .ServiceName }}"
	"github.com/hashicorp/go-multierror"
	"github.com/terraform-providers/terraform-provider-aws/aws/internal/service/{{ .ServiceName }}/lister"
)

{{- $serviceName := .ServiceName }}
{{- $serviceNameTitle := .ServiceName | Title }}
{{- range $resourceTypeName, $resourceType := .ResourceTypes }}

func testSweep{{ $serviceNameTitle }}{{ $resourceTypeName }}s(region string) error {
	conn, err := shared{{ $serviceNameTitle }}ClientForRegion(region)
	if err != nil {
		return err
	}

	var sweeperErrs *multierror.Error

	{{ template "single" dict "ServiceName" $serviceName "TypeName" $resourceTypeName "Type" $resourceType }}

	return sweeperErrs.ErrorOrNil()
}
{{- end }}
`

const singleBody = `
{{- $serviceNameTitle := .ServiceName | Title }}
{{- $fullResourceName := printf "%s %s" $serviceNameTitle .TypeName }}
{{- $fullResourceNamePlural := printf "%s %ss" $serviceNameTitle .TypeName }}
err = lister.{{ .Type.ListerFunction }}(conn, func(page *{{ .ServiceName }}.{{ .Type.ListerOutputType }}, lastPage bool) bool {
	if page == nil {
		return !lastPage
	}

	for _, r := range page.{{ .Type.ListerPageField }} {
		name := aws.StringValue(r.{{ .Type.ResourceNameFunction }})

		log.Printf("[INFO] Deleting {{ $fullResourceName }}: %s", name)
		err := delete{{ $serviceNameTitle }}{{ .TypeName }}(conn, delete{{ $serviceNameTitle }}{{ .TypeName }}InputFromAPIResource(r))
		if err != nil {
			sweeperErrs = multierror.Append(sweeperErrs, fmt.Errorf("error deleting {{ $fullResourceName }} (%s): %w", name, err))
			continue
		}
	}

	return !lastPage
})

if testSweepSkipSweepError(err) {
	log.Printf("[WARN] Skipping {{ $fullResourceName }} sweeper for %q: %s", region, err)
	return sweeperErrs.ErrorOrNil() // In case we have completed some pages, but had errors
}

if err != nil {
	sweeperErrs = multierror.Append(sweeperErrs, fmt.Errorf("error listing {{ $fullResourceNamePlural }}: %w", err))
}
`
